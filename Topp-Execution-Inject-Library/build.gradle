plugins {
    id 'java'
    id 'java-library-distribution'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    api project(':Topp-Execution-Core-Library')

    implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.1.0.RC1'

    testImplementation 'org.slf4j:slf4j-simple:2.0.12'
    testImplementation 'org.jboss.weld.se:weld-se-core:6.0.0.Beta1'  //Feb 26, 2024
}


task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.getAllSource().srcDirs+"\n"


            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"

            print "-->Compile classpath: \n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""

            print "-->Runtime classpath: \n"
            srcSet.runtimeClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""

            print "-->Resource files: \n"
            srcSet.resources.files.each {
                print "  "+it.path+"\n"
            }
            println ""

//            print sourceSets.main.resources.srcDirs

//            println ""
//            println ""
        }
    }
}

sourceSets{
    test {
        resources {
//            compileClasspath += sourceSets.main.resources
            runtimeClasspath += sourceSets.main.resources
//            runtimeClasspath += file("$rootDir/src/main/resources")
//            srcDirs+=["$rootDir/src/main/resources"]
//            resources+=sourceSets.main.resources
//            srcDresources.sourceDirectories+=sourceSets.main.resources
            srcDirs+=sourceSets.main.resources.srcDirs
            srcDirs+=["$rootDir/src/main/resources"]
        }
    }
}

/* */
tasks.register('copyResources', Copy) {
    from "${projectDir}/src/main/resources"
    into "${buildDir}/classes/java/main"
}
processResources.dependsOn copyResources
/* */

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
